{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistroComponent = class RegistroComponent {\n  //data?:SingUp;\n  constructor(fb, AuthService, router) {\n    this.fb = fb;\n    this.AuthService = AuthService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.register = this.initForm();\n  }\n  initForm() {\n    return this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(12)]],\n      id: ['', [Validators.required, Validators.minLength(10)]],\n      birthDate: ['', Validators.required],\n      email: ['', [Validators.required, Validators.pattern(/^.+@.+\\..+$/)]],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(250), Validators.pattern(/^[\\w\\d!@#$%^&*()\\-+=<>?/[\\]{}|\\\\`~]+$/)]]\n      /*confirmPassword:['', [\r\n        Validators.required,\r\n        this.matchPassword.bind(this) // Agregamos la validación personalizada aquí\r\n      ]]*/\n    });\n  }\n\n  sendData() {\n    console.log(this.register.value.id);\n    if (this.register.valid) {\n      const data = {\n        id: this.register.value.id,\n        name: this.register.value.name,\n        birthDate: this.register.value.birthDate,\n        email: this.register.value.email,\n        password: this.register.value.password\n      };\n      this.AuthService.singUp(data).subscribe(respuesta => {\n        alert('Registro Exitoso');\n      });\n    }\n  }\n};\nRegistroComponent = __decorate([Component({\n  selector: 'app-registro',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.css']\n})], RegistroComponent);\nexport { RegistroComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAwDC,UAAU,QAAQ,gBAAgB;AASnF,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5B;EACAC,YAA6BC,EAAc,EAAUC,WAAuB,EAASC,MAAc;IAAtE,OAAE,GAAFF,EAAE;IAAsB,gBAAW,GAAXC,WAAW;IAAqB,WAAM,GAANC,MAAM;EAAY;EAEvGC,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACC,QAAQ,EAAE;EAC/B;EACAA,QAAQ;IACR,OAAO,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MACrBC,IAAI,EAAC,CAAC,EAAE,EAAC,CAACV,UAAU,CAACW,QAAQ,EAACX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACxDC,EAAE,EAAC,CAAC,EAAE,EAAC,CAACb,UAAU,CAACW,QAAQ,EAACX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACtDE,SAAS,EAAC,CAAC,EAAE,EAACd,UAAU,CAACW,QAAQ,CAAC;MAClCI,KAAK,EAAC,CAAC,EAAE,EAAC,CAACf,UAAU,CAACW,QAAQ,EAACX,UAAU,CAACgB,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;MAClEC,QAAQ,EAAC,CAAC,EAAE,EAAC,CACXjB,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,EACvBZ,UAAU,CAACkB,SAAS,CAAC,GAAG,CAAC,EACzBlB,UAAU,CAACgB,OAAO,CAAC,uCAAuC,CAAC,CAC5D;MACD;;;;KAIC,CAAC;EACF;;EAEAG,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,QAAQ,CAACe,KAAK,CAACT,EAAE,CAAC;IACrC,IAAG,IAAI,CAACN,QAAQ,CAACgB,KAAK,EAAC;MAErB,MAAMC,IAAI,GAAW;QACnBX,EAAE,EAAE,IAAI,CAACN,QAAQ,CAACe,KAAK,CAACT,EAAE;QAC1BH,IAAI,EAAE,IAAI,CAACH,QAAQ,CAACe,KAAK,CAACZ,IAAI;QAC9BI,SAAS,EAAE,IAAI,CAACP,QAAQ,CAACe,KAAK,CAACR,SAAS;QACxCC,KAAK,EAAE,IAAI,CAACR,QAAQ,CAACe,KAAK,CAACP,KAAK;QAChCE,QAAQ,EAAE,IAAI,CAACV,QAAQ,CAACe,KAAK,CAACL;OAC/B;MAED,IAAI,CAACb,WAAW,CAACqB,MAAM,CAACD,IAAI,CAAC,CAACE,SAAS,CAEnCC,SAAS,IACR;QAACC,KAAK,CAAC,kBAAkB,CAAC;MAAA,CAAC,CAC/B;;EAEH;CAcD;AA3DY3B,iBAAiB,eAL7BF,SAAS,CAAC;EACT8B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW9B,iBAAiB,CA2D7B;SA3DYA,iBAAiB","names":["Component","Validators","RegistroComponent","constructor","fb","AuthService","router","ngOnInit","register","initForm","group","name","required","minLength","id","birthDate","email","pattern","password","maxLength","sendData","console","log","value","valid","data","singUp","subscribe","respuesta","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Git\\proyecto-lab-clinico\\src\\app\\auth\\pages\\registro\\registro.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, Form, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { SingUp } from 'src/app/interface/auth/sing-up';\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.css']\n})\nexport class RegistroComponent implements OnInit {\n  register!:FormGroup;\n  //data?:SingUp;\n  constructor(private readonly fb:FormBuilder, private AuthService:AuthService,private router: Router) { }\n\n  ngOnInit(): void {\n    this.register=this.initForm();\n  }\n  initForm():FormGroup{\n  return this.fb.group({\n  name:['',[Validators.required,Validators.minLength(12)]],\n  id:['',[Validators.required,Validators.minLength(10)]],\n  birthDate:['',Validators.required],\n  email:['',[Validators.required,Validators.pattern(/^.+@.+\\..+$/)]],\n  password:['',[\n    Validators.required,\n    Validators.minLength(8),\n    Validators.maxLength(250),\n    Validators.pattern(/^[\\w\\d!@#$%^&*()\\-+=<>?/[\\]{}|\\\\`~]+$/)\n  ]],\n  /*confirmPassword:['', [\n    Validators.required,\n    this.matchPassword.bind(this) // Agregamos la validación personalizada aquí\n  ]]*/\n  });\n  }\n\n  sendData(){\n    console.log(this.register.value.id)\n  if(this.register.valid){\n\n    const data: SingUp = {\n      id: this.register.value.id,\n      name: this.register.value.name,\n      birthDate: this.register.value.birthDate,\n      email: this.register.value.email,\n      password: this.register.value.password,\n    };\n\n    this.AuthService.singUp(data).subscribe(\n      (\n        respuesta\n      )=>{alert('Registro Exitoso')}\n    )\n  }\n  }\n\n  // Función de validación personalizada para confirmar que las contraseñas coincidan\n/*matchPassword(control: AbstractControl): { [key: string]: boolean } | null {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n\n  // Verificar si los campos tienen valores y si son iguales\n  if (password && confirmPassword && password.value === confirmPassword.value) {\n    return null; // Coinciden, no hay error\n  } else {\n    return { 'mismatch': true }; // No coinciden, retornamos un error con etiqueta 'mismatch'\n  }\n}*/\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}