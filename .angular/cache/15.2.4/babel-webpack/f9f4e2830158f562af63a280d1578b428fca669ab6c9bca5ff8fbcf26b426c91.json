{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistrarResultadoComponent = class RegistrarResultadoComponent {\n  constructor(examen, fb, resuñtado) {\n    this.examen = examen;\n    this.fb = fb;\n    this.resuñtado = resuñtado;\n  }\n  ngOnInit() {\n    this.register = this.initForm();\n  }\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n  }\n  initForm() {\n    return this.fb.group({\n      examenId: ['', [Validators.required, Validators.minLength(12)]],\n      userId: ['', [Validators.required, Validators.maxLength(30)]]\n    });\n  }\n  onUpload() {\n    var _a;\n    if (this.selectedFile) {\n      const formData = new FormData();\n      formData.append('file', this.selectedFile, (_a = this.selectedFile) === null || _a === void 0 ? void 0 : _a.name);\n      this.examen.uploadexam(formData).subscribe(data => {\n        console.log(data.result);\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n  obtenerFechaEnFormato() {\n    const fechaActual = new Date();\n    const año = fechaActual.getFullYear();\n    const mes = (fechaActual.getMonth() + 1).toString().padStart(2, '0'); // Sumamos 1 al mes ya que los meses en JavaScript son de 0 a 11\n    const día = fechaActual.getDate().toString().padStart(2, '0');\n    return `${año}/${mes}/${día}`;\n  }\n  saveExam() {\n    if (this.register.valid) {\n      const fechaHoy = this.obtenerFechaEnFormato();\n      const data = {\n        userId: this.register.value.userId,\n        examenId: this.register.value.examenId,\n        resultadoDate: fechaHoy,\n        url: this.url\n      };\n      thi;\n    }\n  }\n};\nRegistrarResultadoComponent = __decorate([Component({\n  selector: 'app-registrar-resultado',\n  templateUrl: './registrar-resultado.component.html',\n  styleUrls: ['./registrar-resultado.component.css']\n})], RegistrarResultadoComponent);\nexport { RegistrarResultadoComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAO5D,IAAMC,2BAA2B,GAAjC,MAAMA,2BAA2B;EAEtCC,YAAoBC,MAAoB,EAAUC,EAAc,EAASC,SAAe;IAApE,WAAM,GAANF,MAAM;IAAwB,OAAE,GAAFC,EAAE;IAAqB,cAAS,GAATC,SAAS;EAAU;EAG5FC,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACC,QAAQ,EAAE;EAC/B;EAEAC,cAAc,CAACC,KAAS;IACtB,IAAI,CAACC,YAAY,GAASD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAEjD;EACAL,QAAQ;IACN,OAAO,IAAI,CAACJ,EAAE,CAACU,KAAK,CAAC;MACrBC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACf,UAAU,CAACgB,QAAQ,EAAChB,UAAU,CAACiB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5DC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAClB,UAAU,CAACgB,QAAQ,EAAChB,UAAU,CAACmB,SAAS,CAAC,EAAE,CAAC,CAAC;KACxD,CAAC;EACF;EAGJC,QAAQ;;IACN,IAAI,IAAI,CAACT,YAAY,EAAE;MACvB,MAAMU,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACZ,YAAY,EAAE,UAAI,CAACA,YAAY,0CAAEa,IAAI,CAAC;MACnE,IAAI,CAACrB,MAAM,CAACsB,UAAU,CAACJ,QAAQ,CAAC,CAACK,SAAS,CACvCC,IAAI,IAAG;QAENC,OAAO,CAACC,GAAG,CAAEF,IAAY,CAACG,MAAM,CAAC;MACnC,CAAC,EAAEC,KAAK,IAAG;QACTH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MACpB,CAAC,CACF;;EAEH;EACCC,qBAAqB;IACpB,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,MAAMC,GAAG,GAAGF,WAAW,CAACG,WAAW,EAAE;IACrC,MAAMC,GAAG,GAAG,CAACJ,WAAW,CAACK,QAAQ,EAAE,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACtE,MAAMC,GAAG,GAAGR,WAAW,CAACS,OAAO,EAAE,CAACH,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAE7D,OAAO,GAAGL,GAAG,IAAIE,GAAG,IAAII,GAAG,EAAE;EAC/B;EAEAE,QAAQ;IACN,IAAG,IAAI,CAACpC,QAAQ,CAACqC,KAAK,EAAC;MACrB,MAAMC,QAAQ,GAAG,IAAI,CAACb,qBAAqB,EAAE;MAC7C,MAAML,IAAI,GAAC;QACTT,MAAM,EAAC,IAAI,CAACX,QAAQ,CAACuC,KAAK,CAAC5B,MAAM;QACjCH,QAAQ,EAAC,IAAI,CAACR,QAAQ,CAACuC,KAAK,CAAC/B,QAAQ;QACrCgC,aAAa,EAACF,QAAQ;QACtBG,GAAG,EAAC,IAAI,CAACA;OAEV;MACDC,GAAG;;EAIP;CAEC;AA5DYhD,2BAA2B,eALvCF,SAAS,CAAC;EACTmD,QAAQ,EAAE,yBAAyB;EACnCC,WAAW,EAAE,sCAAsC;EACnDC,SAAS,EAAE,CAAC,qCAAqC;CAClD,CAAC,GACWnD,2BAA2B,CA4DvC;SA5DYA,2BAA2B","names":["Component","Validators","RegistrarResultadoComponent","constructor","examen","fb","resuñtado","ngOnInit","register","initForm","onFileSelected","event","selectedFile","target","files","group","examenId","required","minLength","userId","maxLength","onUpload","formData","FormData","append","name","uploadexam","subscribe","data","console","log","result","error","obtenerFechaEnFormato","fechaActual","Date","año","getFullYear","mes","getMonth","toString","padStart","día","getDate","saveExam","valid","fechaHoy","value","resultadoDate","url","thi","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Git\\proyecto-lab-clinico\\src\\app\\admin\\registrar-resultado\\registrar-resultado.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ExamenService } from '../services/examen.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-registrar-resultado',\n  templateUrl: './registrar-resultado.component.html',\n  styleUrls: ['./registrar-resultado.component.css']\n})\nexport class RegistrarResultadoComponent {\n  register!:FormGroup;\n  constructor(private examen:ExamenService,private  fb:FormBuilder,private resuñtado:Resul) { }\n  selectedFile?: File;\n  url?:string;\n  ngOnInit(): void {\n    this.register=this.initForm();\n  }\n\n  onFileSelected(event:any) {\n    this.selectedFile = <File>event.target.files[0];\n\n  }\n  initForm():FormGroup{\n    return this.fb.group({\n    examenId:['',[Validators.required,Validators.minLength(12)]],\n    userId:['',[Validators.required,Validators.maxLength(30)]],\n    });\n    }\n\n\nonUpload() {\n  if (this.selectedFile) {\n  const formData = new FormData();\n  formData.append('file', this.selectedFile, this.selectedFile?.name);\n  this.examen.uploadexam(formData).subscribe(\n    (data)=>{\n\n      console.log((data as any).result)\n    },(error)=>{\n      console.log(error)\n    }\n  )\n}\n}\n obtenerFechaEnFormato(): string {\n  const fechaActual = new Date();\n  const año = fechaActual.getFullYear();\n  const mes = (fechaActual.getMonth() + 1).toString().padStart(2, '0'); // Sumamos 1 al mes ya que los meses en JavaScript son de 0 a 11\n  const día = fechaActual.getDate().toString().padStart(2, '0');\n\n  return `${año}/${mes}/${día}`;\n}\n\nsaveExam(){\n  if(this.register.valid){\n    const fechaHoy = this.obtenerFechaEnFormato();\n    const data={\n      userId:this.register.value.userId,\n      examenId:this.register.value.examenId,\n      resultadoDate:fechaHoy,\n      url:this.url\n\n    }\n    thi\n\n  }\n\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}